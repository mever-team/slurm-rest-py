# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.2&openapi/slurmdbd&openapi/v0.0.39&openapi/dbv0.0.39&openapi/slurmctld
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from slurm_rest.models.v0039_assoc_max import V0039AssocMax

class TestV0039AssocMax(unittest.TestCase):
    """V0039AssocMax unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V0039AssocMax:
        """Test V0039AssocMax
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V0039AssocMax`
        """
        model = V0039AssocMax()
        if include_optional:
            return V0039AssocMax(
                jobs = slurm_rest.models.v0_0_39_assoc_max_jobs.v0_0_39_assoc_max_jobs(
                    per = slurm_rest.models.v0_0_39_assoc_max_jobs_per.v0_0_39_assoc_max_jobs_per(
                        count = slurm_rest.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                            set = True, 
                            infinite = True, 
                            number = 56, ), 
                        accruing = slurm_rest.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                            set = True, 
                            infinite = True, 
                            number = 56, ), 
                        submitted = , 
                        wall_clock = , ), 
                    active = , 
                    accruing = , 
                    total = , ),
                tres = slurm_rest.models.v0_0_39_assoc_max_tres.v0_0_39_assoc_max_tres(
                    total = [
                        slurm_rest.models.v0/0/39_tres.v0.0.39_tres(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], 
                    minutes = slurm_rest.models.v0_0_39_assoc_max_tres_minutes.v0_0_39_assoc_max_tres_minutes(
                        per = slurm_rest.models.v0_0_39_assoc_max_tres_minutes_per.v0_0_39_assoc_max_tres_minutes_per(
                            job = [
                                slurm_rest.models.v0/0/39_tres.v0.0.39_tres(
                                    type = '', 
                                    name = '', 
                                    id = 56, 
                                    count = 56, )
                                ], ), 
                        total = , ), 
                    group = slurm_rest.models.v0_0_39_assoc_max_tres_group.v0_0_39_assoc_max_tres_group(
                        active = , ), 
                    per = slurm_rest.models.v0_0_39_assoc_max_tres_per.v0_0_39_assoc_max_tres_per(
                        job = , 
                        node = , ), ),
                per = slurm_rest.models.v0_0_39_assoc_max_per.v0_0_39_assoc_max_per(
                    account = slurm_rest.models.v0_0_39_assoc_max_per_account.v0_0_39_assoc_max_per_account(
                        wall_clock = slurm_rest.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                            set = True, 
                            infinite = True, 
                            number = 56, ), ), )
            )
        else:
            return V0039AssocMax(
        )
        """

    def testV0039AssocMax(self):
        """Test V0039AssocMax"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
